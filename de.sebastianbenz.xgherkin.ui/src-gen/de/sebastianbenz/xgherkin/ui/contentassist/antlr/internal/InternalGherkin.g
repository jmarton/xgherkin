/*
* generated by Xtext
*/
grammar InternalGherkin;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.sebastianbenz.xgherkin.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.sebastianbenz.xgherkin.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.sebastianbenz.xgherkin.services.GherkinGrammarAccess;

}

@parser::members {
 
 	private GherkinGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(GherkinGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleFeature
entryRuleFeature 
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureAccess().getGroup()); }
(rule__Feature__Group__0)
{ after(grammarAccess.getFeatureAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNarrativeElement
entryRuleNarrativeElement 
:
{ before(grammarAccess.getNarrativeElementRule()); }
	 ruleNarrativeElement
{ after(grammarAccess.getNarrativeElementRule()); } 
	 EOF 
;

// Rule NarrativeElement
ruleNarrativeElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNarrativeElementAccess().getAlternatives()); }
(rule__NarrativeElement__Alternatives)
{ after(grammarAccess.getNarrativeElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFreeText
entryRuleFreeText 
:
{ before(grammarAccess.getFreeTextRule()); }
	 ruleFreeText
{ after(grammarAccess.getFreeTextRule()); } 
	 EOF 
;

// Rule FreeText
ruleFreeText
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFreeTextAccess().getNameAssignment()); }
(rule__FreeText__NameAssignment)
{ after(grammarAccess.getFreeTextAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAsA
entryRuleAsA 
:
{ before(grammarAccess.getAsARule()); }
	 ruleAsA
{ after(grammarAccess.getAsARule()); } 
	 EOF 
;

// Rule AsA
ruleAsA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAsAAccess().getNameAssignment()); }
(rule__AsA__NameAssignment)
{ after(grammarAccess.getAsAAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInOrderTo
entryRuleInOrderTo 
:
{ before(grammarAccess.getInOrderToRule()); }
	 ruleInOrderTo
{ after(grammarAccess.getInOrderToRule()); } 
	 EOF 
;

// Rule InOrderTo
ruleInOrderTo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInOrderToAccess().getNameAssignment()); }
(rule__InOrderTo__NameAssignment)
{ after(grammarAccess.getInOrderToAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIWantTo
entryRuleIWantTo 
:
{ before(grammarAccess.getIWantToRule()); }
	 ruleIWantTo
{ after(grammarAccess.getIWantToRule()); } 
	 EOF 
;

// Rule IWantTo
ruleIWantTo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIWantToAccess().getNameAssignment()); }
(rule__IWantTo__NameAssignment)
{ after(grammarAccess.getIWantToAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractScenario
entryRuleAbstractScenario 
:
{ before(grammarAccess.getAbstractScenarioRule()); }
	 ruleAbstractScenario
{ after(grammarAccess.getAbstractScenarioRule()); } 
	 EOF 
;

// Rule AbstractScenario
ruleAbstractScenario
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractScenarioAccess().getAlternatives()); }
(rule__AbstractScenario__Alternatives)
{ after(grammarAccess.getAbstractScenarioAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScenario
entryRuleScenario 
:
{ before(grammarAccess.getScenarioRule()); }
	 ruleScenario
{ after(grammarAccess.getScenarioRule()); } 
	 EOF 
;

// Rule Scenario
ruleScenario
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScenarioAccess().getGroup()); }
(rule__Scenario__Group__0)
{ after(grammarAccess.getScenarioAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleScenarioWithOutline
entryRuleScenarioWithOutline 
:
{ before(grammarAccess.getScenarioWithOutlineRule()); }
	 ruleScenarioWithOutline
{ after(grammarAccess.getScenarioWithOutlineRule()); } 
	 EOF 
;

// Rule ScenarioWithOutline
ruleScenarioWithOutline
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getGroup()); }
(rule__ScenarioWithOutline__Group__0)
{ after(grammarAccess.getScenarioWithOutlineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExampleRow
entryRuleExampleRow 
:
{ before(grammarAccess.getExampleRowRule()); }
	 ruleExampleRow
{ after(grammarAccess.getExampleRowRule()); } 
	 EOF 
;

// Rule ExampleRow
ruleExampleRow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExampleRowAccess().getGroup()); }
(rule__ExampleRow__Group__0)
{ after(grammarAccess.getExampleRowAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExampleCell
entryRuleExampleCell 
:
{ before(grammarAccess.getExampleCellRule()); }
	 ruleExampleCell
{ after(grammarAccess.getExampleCellRule()); } 
	 EOF 
;

// Rule ExampleCell
ruleExampleCell
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExampleCellAccess().getValueAssignment()); }
(rule__ExampleCell__ValueAssignment)
{ after(grammarAccess.getExampleCellAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBackground
entryRuleBackground 
:
{ before(grammarAccess.getBackgroundRule()); }
	 ruleBackground
{ after(grammarAccess.getBackgroundRule()); } 
	 EOF 
;

// Rule Background
ruleBackground
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBackgroundAccess().getGroup()); }
(rule__Background__Group__0)
{ after(grammarAccess.getBackgroundAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStep
entryRuleStep 
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepAccess().getAlternatives()); }
(rule__Step__Alternatives)
{ after(grammarAccess.getStepAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhenStep
entryRuleWhenStep 
:
{ before(grammarAccess.getWhenStepRule()); }
	 ruleWhenStep
{ after(grammarAccess.getWhenStepRule()); } 
	 EOF 
;

// Rule WhenStep
ruleWhenStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhenStepAccess().getGroup()); }
(rule__WhenStep__Group__0)
{ after(grammarAccess.getWhenStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleThenStep
entryRuleThenStep 
:
{ before(grammarAccess.getThenStepRule()); }
	 ruleThenStep
{ after(grammarAccess.getThenStepRule()); } 
	 EOF 
;

// Rule ThenStep
ruleThenStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getThenStepAccess().getGroup()); }
(rule__ThenStep__Group__0)
{ after(grammarAccess.getThenStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGivenStep
entryRuleGivenStep 
:
{ before(grammarAccess.getGivenStepRule()); }
	 ruleGivenStep
{ after(grammarAccess.getGivenStepRule()); } 
	 EOF 
;

// Rule GivenStep
ruleGivenStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGivenStepAccess().getGroup()); }
(rule__GivenStep__Group__0)
{ after(grammarAccess.getGivenStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndStep
entryRuleAndStep 
:
{ before(grammarAccess.getAndStepRule()); }
	 ruleAndStep
{ after(grammarAccess.getAndStepRule()); } 
	 EOF 
;

// Rule AndStep
ruleAndStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndStepAccess().getGroup()); }
(rule__AndStep__Group__0)
{ after(grammarAccess.getAndStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOptionalText
entryRuleOptionalText 
:
{ before(grammarAccess.getOptionalTextRule()); }
	 ruleOptionalText
{ after(grammarAccess.getOptionalTextRule()); } 
	 EOF 
;

// Rule OptionalText
ruleOptionalText
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionalTextAccess().getAlternatives()); }
(rule__OptionalText__Alternatives)
{ after(grammarAccess.getOptionalTextAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__NarrativeElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNarrativeElementAccess().getInOrderToParserRuleCall_0()); }
	ruleInOrderTo
{ after(grammarAccess.getNarrativeElementAccess().getInOrderToParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNarrativeElementAccess().getAsAParserRuleCall_1()); }
	ruleAsA
{ after(grammarAccess.getNarrativeElementAccess().getAsAParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNarrativeElementAccess().getIWantToParserRuleCall_2()); }
	ruleIWantTo
{ after(grammarAccess.getNarrativeElementAccess().getIWantToParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNarrativeElementAccess().getFreeTextParserRuleCall_3()); }
	ruleFreeText
{ after(grammarAccess.getNarrativeElementAccess().getFreeTextParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractScenario__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractScenarioAccess().getBackgroundParserRuleCall_0()); }
	ruleBackground
{ after(grammarAccess.getAbstractScenarioAccess().getBackgroundParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractScenarioAccess().getScenarioParserRuleCall_1()); }
	ruleScenario
{ after(grammarAccess.getAbstractScenarioAccess().getScenarioParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractScenarioAccess().getScenarioWithOutlineParserRuleCall_2()); }
	ruleScenarioWithOutline
{ after(grammarAccess.getAbstractScenarioAccess().getScenarioWithOutlineParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getWhenStepParserRuleCall_0()); }
	ruleWhenStep
{ after(grammarAccess.getStepAccess().getWhenStepParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStepAccess().getThenStepParserRuleCall_1()); }
	ruleThenStep
{ after(grammarAccess.getStepAccess().getThenStepParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStepAccess().getGivenStepParserRuleCall_2()); }
	ruleGivenStep
{ after(grammarAccess.getStepAccess().getGivenStepParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStepAccess().getAndStepParserRuleCall_3()); }
	ruleAndStep
{ after(grammarAccess.getStepAccess().getAndStepParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OptionalText__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalTextAccess().getTEXTTerminalRuleCall_0()); }
	RULE_TEXT
{ after(grammarAccess.getOptionalTextAccess().getTEXTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOptionalTextAccess().getCODETerminalRuleCall_1()); }
	RULE_CODE
{ after(grammarAccess.getOptionalTextAccess().getCODETerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Feature__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__0__Impl
	rule__Feature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getTagsAssignment_0()); }
(rule__Feature__TagsAssignment_0)*
{ after(grammarAccess.getFeatureAccess().getTagsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__1__Impl
	rule__Feature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getNameAssignment_1()); }
(rule__Feature__NameAssignment_1)
{ after(grammarAccess.getFeatureAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__2__Impl
	rule__Feature__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getElementsAssignment_2()); }
(rule__Feature__ElementsAssignment_2)*
{ after(grammarAccess.getFeatureAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feature__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getScenariosAssignment_3()); }
(rule__Feature__ScenariosAssignment_3)*
{ after(grammarAccess.getFeatureAccess().getScenariosAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Scenario__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__0__Impl
	rule__Scenario__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getTagsAssignment_0()); }
(rule__Scenario__TagsAssignment_0)*
{ after(grammarAccess.getScenarioAccess().getTagsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__1__Impl
	rule__Scenario__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameAssignment_1()); }
(rule__Scenario__NameAssignment_1)
{ after(grammarAccess.getScenarioAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__2__Impl
	rule__Scenario__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getElementsAssignment_2()); }
(rule__Scenario__ElementsAssignment_2)*
{ after(grammarAccess.getScenarioAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getScenarioAccess().getStepsAssignment_3()); }
(rule__Scenario__StepsAssignment_3)
{ after(grammarAccess.getScenarioAccess().getStepsAssignment_3()); }
)
(
{ before(grammarAccess.getScenarioAccess().getStepsAssignment_3()); }
(rule__Scenario__StepsAssignment_3)*
{ after(grammarAccess.getScenarioAccess().getStepsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ScenarioWithOutline__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScenarioWithOutline__Group__0__Impl
	rule__ScenarioWithOutline__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getTagsAssignment_0()); }
(rule__ScenarioWithOutline__TagsAssignment_0)*
{ after(grammarAccess.getScenarioWithOutlineAccess().getTagsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScenarioWithOutline__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScenarioWithOutline__Group__1__Impl
	rule__ScenarioWithOutline__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getNameAssignment_1()); }
(rule__ScenarioWithOutline__NameAssignment_1)
{ after(grammarAccess.getScenarioWithOutlineAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScenarioWithOutline__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScenarioWithOutline__Group__2__Impl
	rule__ScenarioWithOutline__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getElementsAssignment_2()); }
(rule__ScenarioWithOutline__ElementsAssignment_2)*
{ after(grammarAccess.getScenarioWithOutlineAccess().getElementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScenarioWithOutline__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScenarioWithOutline__Group__3__Impl
	rule__ScenarioWithOutline__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getStepsAssignment_3()); }
(rule__ScenarioWithOutline__StepsAssignment_3)
{ after(grammarAccess.getScenarioWithOutlineAccess().getStepsAssignment_3()); }
)
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getStepsAssignment_3()); }
(rule__ScenarioWithOutline__StepsAssignment_3)*
{ after(grammarAccess.getScenarioWithOutlineAccess().getStepsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScenarioWithOutline__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScenarioWithOutline__Group__4__Impl
	rule__ScenarioWithOutline__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getEXAMPLE_HEADINGTerminalRuleCall_4()); }
	RULE_EXAMPLE_HEADING
{ after(grammarAccess.getScenarioWithOutlineAccess().getEXAMPLE_HEADINGTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScenarioWithOutline__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScenarioWithOutline__Group__5__Impl
	rule__ScenarioWithOutline__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getHeadingAssignment_5()); }
(rule__ScenarioWithOutline__HeadingAssignment_5)
{ after(grammarAccess.getScenarioWithOutlineAccess().getHeadingAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScenarioWithOutline__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScenarioWithOutline__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getRowsAssignment_6()); }
(rule__ScenarioWithOutline__RowsAssignment_6)*
{ after(grammarAccess.getScenarioWithOutlineAccess().getRowsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ExampleRow__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExampleRow__Group__0__Impl
	rule__ExampleRow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExampleRow__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getExampleRowAccess().getCellsAssignment_0()); }
(rule__ExampleRow__CellsAssignment_0)
{ after(grammarAccess.getExampleRowAccess().getCellsAssignment_0()); }
)
(
{ before(grammarAccess.getExampleRowAccess().getCellsAssignment_0()); }
(rule__ExampleRow__CellsAssignment_0)*
{ after(grammarAccess.getExampleRowAccess().getCellsAssignment_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExampleRow__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExampleRow__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExampleRow__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExampleRowAccess().getEXAMPLE_ROW_ENDTerminalRuleCall_1()); }
	RULE_EXAMPLE_ROW_END
{ after(grammarAccess.getExampleRowAccess().getEXAMPLE_ROW_ENDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Background__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Background__Group__0__Impl
	rule__Background__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Background__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBackgroundAccess().getTagsAssignment_0()); }
(rule__Background__TagsAssignment_0)*
{ after(grammarAccess.getBackgroundAccess().getTagsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Background__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Background__Group__1__Impl
	rule__Background__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Background__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBackgroundAccess().getNameAssignment_1()); }
(rule__Background__NameAssignment_1)
{ after(grammarAccess.getBackgroundAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Background__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Background__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Background__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBackgroundAccess().getStepsAssignment_2()); }
(rule__Background__StepsAssignment_2)*
{ after(grammarAccess.getBackgroundAccess().getStepsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__WhenStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenStep__Group__0__Impl
	rule__WhenStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenStepAccess().getTagsAssignment_0()); }
(rule__WhenStep__TagsAssignment_0)*
{ after(grammarAccess.getWhenStepAccess().getTagsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhenStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenStep__Group__1__Impl
	rule__WhenStep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenStepAccess().getDescAssignment_1()); }
(rule__WhenStep__DescAssignment_1)
{ after(grammarAccess.getWhenStepAccess().getDescAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhenStep__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhenStep__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhenStep__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenStepAccess().getDescAssignment_2()); }
(rule__WhenStep__DescAssignment_2)*
{ after(grammarAccess.getWhenStepAccess().getDescAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ThenStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThenStep__Group__0__Impl
	rule__ThenStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ThenStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThenStepAccess().getTagsAssignment_0()); }
(rule__ThenStep__TagsAssignment_0)*
{ after(grammarAccess.getThenStepAccess().getTagsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ThenStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThenStep__Group__1__Impl
	rule__ThenStep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ThenStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThenStepAccess().getDescAssignment_1()); }
(rule__ThenStep__DescAssignment_1)
{ after(grammarAccess.getThenStepAccess().getDescAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ThenStep__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ThenStep__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ThenStep__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThenStepAccess().getDescAssignment_2()); }
(rule__ThenStep__DescAssignment_2)*
{ after(grammarAccess.getThenStepAccess().getDescAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GivenStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GivenStep__Group__0__Impl
	rule__GivenStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GivenStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGivenStepAccess().getTagsAssignment_0()); }
(rule__GivenStep__TagsAssignment_0)*
{ after(grammarAccess.getGivenStepAccess().getTagsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GivenStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GivenStep__Group__1__Impl
	rule__GivenStep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GivenStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGivenStepAccess().getDescAssignment_1()); }
(rule__GivenStep__DescAssignment_1)
{ after(grammarAccess.getGivenStepAccess().getDescAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GivenStep__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GivenStep__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GivenStep__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGivenStepAccess().getDescAssignment_2()); }
(rule__GivenStep__DescAssignment_2)*
{ after(grammarAccess.getGivenStepAccess().getDescAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndStep__Group__0__Impl
	rule__AndStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndStepAccess().getDescAssignment_0()); }
(rule__AndStep__DescAssignment_0)
{ after(grammarAccess.getAndStepAccess().getDescAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndStep__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndStepAccess().getDescAssignment_1()); }
(rule__AndStep__DescAssignment_1)*
{ after(grammarAccess.getAndStepAccess().getDescAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Feature__TagsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getTagsTAGTerminalRuleCall_0_0()); }
	RULE_TAG{ after(grammarAccess.getFeatureAccess().getTagsTAGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getNameFEATURE_TEXTTerminalRuleCall_1_0()); }
	RULE_FEATURE_TEXT{ after(grammarAccess.getFeatureAccess().getNameFEATURE_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getElementsNarrativeElementParserRuleCall_2_0()); }
	ruleNarrativeElement{ after(grammarAccess.getFeatureAccess().getElementsNarrativeElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__ScenariosAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getScenariosAbstractScenarioParserRuleCall_3_0()); }
	ruleAbstractScenario{ after(grammarAccess.getFeatureAccess().getScenariosAbstractScenarioParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FreeText__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFreeTextAccess().getNameTEXTTerminalRuleCall_0()); }
	RULE_TEXT{ after(grammarAccess.getFreeTextAccess().getNameTEXTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AsA__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsAAccess().getNameAS_ATerminalRuleCall_0()); }
	RULE_AS_A{ after(grammarAccess.getAsAAccess().getNameAS_ATerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InOrderTo__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInOrderToAccess().getNameIN_ORDER_TOTerminalRuleCall_0()); }
	RULE_IN_ORDER_TO{ after(grammarAccess.getInOrderToAccess().getNameIN_ORDER_TOTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IWantTo__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIWantToAccess().getNameI_WANT_TOTerminalRuleCall_0()); }
	RULE_I_WANT_TO{ after(grammarAccess.getIWantToAccess().getNameI_WANT_TOTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__TagsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getTagsTAGTerminalRuleCall_0_0()); }
	RULE_TAG{ after(grammarAccess.getScenarioAccess().getTagsTAGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameSCENARIO_TEXTTerminalRuleCall_1_0()); }
	RULE_SCENARIO_TEXT{ after(grammarAccess.getScenarioAccess().getNameSCENARIO_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getElementsNarrativeElementParserRuleCall_2_0()); }
	ruleNarrativeElement{ after(grammarAccess.getScenarioAccess().getElementsNarrativeElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__StepsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getStepsStepParserRuleCall_3_0()); }
	ruleStep{ after(grammarAccess.getScenarioAccess().getStepsStepParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__TagsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getTagsTAGTerminalRuleCall_0_0()); }
	RULE_TAG{ after(grammarAccess.getScenarioWithOutlineAccess().getTagsTAGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getNameSCENARIO_OUTLINE_TEXTTerminalRuleCall_1_0()); }
	RULE_SCENARIO_OUTLINE_TEXT{ after(grammarAccess.getScenarioWithOutlineAccess().getNameSCENARIO_OUTLINE_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__ElementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getElementsNarrativeElementParserRuleCall_2_0()); }
	ruleNarrativeElement{ after(grammarAccess.getScenarioWithOutlineAccess().getElementsNarrativeElementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__StepsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getStepsStepParserRuleCall_3_0()); }
	ruleStep{ after(grammarAccess.getScenarioWithOutlineAccess().getStepsStepParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__HeadingAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getHeadingExampleRowParserRuleCall_5_0()); }
	ruleExampleRow{ after(grammarAccess.getScenarioWithOutlineAccess().getHeadingExampleRowParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScenarioWithOutline__RowsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioWithOutlineAccess().getRowsExampleRowParserRuleCall_6_0()); }
	ruleExampleRow{ after(grammarAccess.getScenarioWithOutlineAccess().getRowsExampleRowParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExampleRow__CellsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExampleRowAccess().getCellsExampleCellParserRuleCall_0_0()); }
	ruleExampleCell{ after(grammarAccess.getExampleRowAccess().getCellsExampleCellParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExampleCell__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExampleCellAccess().getValueEXAMPLE_CELLTerminalRuleCall_0()); }
	RULE_EXAMPLE_CELL{ after(grammarAccess.getExampleCellAccess().getValueEXAMPLE_CELLTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Background__TagsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBackgroundAccess().getTagsTAGTerminalRuleCall_0_0()); }
	RULE_TAG{ after(grammarAccess.getBackgroundAccess().getTagsTAGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Background__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBackgroundAccess().getNameBACKGROUND_TEXTTerminalRuleCall_1_0()); }
	RULE_BACKGROUND_TEXT{ after(grammarAccess.getBackgroundAccess().getNameBACKGROUND_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Background__StepsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBackgroundAccess().getStepsStepParserRuleCall_2_0()); }
	ruleStep{ after(grammarAccess.getBackgroundAccess().getStepsStepParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhenStep__TagsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenStepAccess().getTagsTAGTerminalRuleCall_0_0()); }
	RULE_TAG{ after(grammarAccess.getWhenStepAccess().getTagsTAGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhenStep__DescAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenStepAccess().getDescWHEN_TEXTTerminalRuleCall_1_0()); }
	RULE_WHEN_TEXT{ after(grammarAccess.getWhenStepAccess().getDescWHEN_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhenStep__DescAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhenStepAccess().getDescOptionalTextParserRuleCall_2_0()); }
	ruleOptionalText{ after(grammarAccess.getWhenStepAccess().getDescOptionalTextParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThenStep__TagsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThenStepAccess().getTagsTAGTerminalRuleCall_0_0()); }
	RULE_TAG{ after(grammarAccess.getThenStepAccess().getTagsTAGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThenStep__DescAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThenStepAccess().getDescTHEN_TEXTTerminalRuleCall_1_0()); }
	RULE_THEN_TEXT{ after(grammarAccess.getThenStepAccess().getDescTHEN_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ThenStep__DescAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThenStepAccess().getDescOptionalTextParserRuleCall_2_0()); }
	ruleOptionalText{ after(grammarAccess.getThenStepAccess().getDescOptionalTextParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GivenStep__TagsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGivenStepAccess().getTagsTAGTerminalRuleCall_0_0()); }
	RULE_TAG{ after(grammarAccess.getGivenStepAccess().getTagsTAGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GivenStep__DescAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGivenStepAccess().getDescGIVEN_TEXTTerminalRuleCall_1_0()); }
	RULE_GIVEN_TEXT{ after(grammarAccess.getGivenStepAccess().getDescGIVEN_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GivenStep__DescAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGivenStepAccess().getDescOptionalTextParserRuleCall_2_0()); }
	ruleOptionalText{ after(grammarAccess.getGivenStepAccess().getDescOptionalTextParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndStep__DescAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndStepAccess().getDescAND_TEXTTerminalRuleCall_0_0()); }
	RULE_AND_TEXT{ after(grammarAccess.getAndStepAccess().getDescAND_TEXTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndStep__DescAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndStepAccess().getDescOptionalTextParserRuleCall_1_0()); }
	ruleOptionalText{ after(grammarAccess.getAndStepAccess().getDescOptionalTextParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_EXAMPLE_HEADING : 'Examples' RULE_SPACES ':' RULE_SPACES '\r'? '\n';

fragment RULE_NNL : ~(('\r'|'\n'));

fragment RULE_NL : '\r'? '\n'?;

fragment RULE_SPACES : (' '|'\t')*;

RULE_FEATURE_TEXT : ('Narrative:'|'Feature:') RULE_NNL* RULE_NL;

RULE_IN_ORDER_TO : 'In order to' RULE_NNL* RULE_NL;

RULE_AS_A : 'As a' RULE_NNL* RULE_NL;

RULE_I_WANT_TO : 'I want to ' RULE_NNL* RULE_NL;

RULE_SCENARIO_TEXT : 'Scenario' RULE_SPACES ':' RULE_NNL* RULE_NL;

RULE_SCENARIO_OUTLINE_TEXT : 'Scenario' RULE_SPACES 'Outline' RULE_SPACES ':' RULE_NNL* RULE_NL;

RULE_BACKGROUND_TEXT : 'Background' RULE_SPACES ':' RULE_NNL* RULE_NL;

RULE_WHEN_TEXT : 'When ' RULE_NNL* RULE_NL;

RULE_THEN_TEXT : 'Then ' RULE_NNL* RULE_NL;

RULE_GIVEN_TEXT : 'Given ' RULE_NNL* RULE_NL;

RULE_AND_TEXT : 'And ' RULE_NNL* RULE_NL;

RULE_EXAMPLE_ROW_END : '|' RULE_SPACES RULE_NL;

RULE_EXAMPLE_CELL : '|' ~(('\r'|'\n'|'|'))+;

RULE_CODE : ('"""' ( options {greedy=false;} : . )*'"""'|'\'\'\'' ( options {greedy=false;} : . )*'\'\'\'');

RULE_TAG : '@' RULE_NNL+ RULE_NL;

RULE_SL_COMMENT : '#' RULE_NNL+ RULE_NL;

RULE_TEXT : ~(('|'|' '|'\t'|'\r'|'\n'|'@')) RULE_NNL* RULE_NL;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


